name: Build Docker Image and Generate SBOM

on:
  push:
    branches: [ "master" ] # ---> IMPORTANT <--- Ensure this matches your active project branch (master)
    paths:
      - 'Dockerfile'
      - 'seccomp.json'
      - '.github/workflows/build-and-sbom.yml' # Trigger if the workflow file itself changes
  pull_request:
    branches: [ "master" ] # ---> IMPORTANT <--- Ensure this matches your active project branch (master)
    paths:
      - 'Dockerfile'
      - 'seccomp.json'
      - '.github/workflows/build-and-sbom.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required for actions/checkout
      packages: write # Required for pushing to GitHub Container Registry (if using ghcr.io)
      # id-token: write # Uncomment if using OIDC for GHCR login, not strictly needed for DOCKERHUB_TOKEN

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step logs into Docker Hub. Ensure DOCKERHUB_USERNAME and DOCKERHUB_TOKEN secrets are set in GitHub.
      # If you prefer to push to GitHub Container Registry (GHCR), uncomment the GHCR lines below and comment out Docker Hub ones.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          # For GHCR, use:
          # registry: ghcr.io
          # username: ${{ github.actor }}
          # password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically available


      - name: Build and Push the Docker image
        uses: docker/build-push-action@v5
        id: build-push # This ID is used by subsequent steps to reference the image
        with:
          context: .
          file: ./Dockerfile
          security-opt: seccomp=seccomp.json # Applies the seccomp profile during the build process
          # target: # Uncomment and specify if you have a specific target stage in your Dockerfile (e.g., target: final)
          # ---> IMPORTANT <--- Replace with your actual Docker Hub username and desired image name!
          # Example: tags: your-dockerhub-username/jq-secure-image:latest
          tags: secpro-jgo/jq-secure-image:latest
          # Only push the image to the registry if it's a 'push' event to the 'master' branch
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
          cache-from: type=gha # Enable caching for faster builds
          cache-to: type=gha,mode=max # Enable caching for faster builds
          # ---> IMPORTANT <--- This output is critical for Trivy and Syft to find the image
          output: type=image,name=secpro-jgo/jq-secure-image:latest # MUST match the tags above


      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0 # ---> IMPORTANT <--- Using @v0 for stability
        with:
          # ---> IMPORTANT <--- Image to scan MUST match the tag from the build step!
          image-ref: secpro-jgo/jq-secure-image:latest
          format: 'table' # Output format: 'table', 'json', 'sarif'
          exit-code: '1' # Fail the workflow if any vulnerabilities are found
          severity: 'CRITICAL,HIGH' # Only report critical and high severity
          ignore-unfixed: true # Ignore vulnerabilities without a fix
          # You can also use .trivyignore file in your repo root for specific ignores
          output: 'trivy-results.json' # Save results to a file for artifact upload

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json # Path to the output file from Trivy


      - name: Generate SBOM with Syft
        uses: anchore/syft-action@v1 # ---> IMPORTANT <--- Corrected version to v1
        with:
          # ---> IMPORTANT <--- Image to scan MUST match the tag from the build step!
          image: secpro-jgo/jq-secure-image:latest
          output: spdx-json # Output format: spdx-json, cyclonedx-json, etc.
          file: sbom.spdx-json # Name of the SBOM file to be created

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx-json